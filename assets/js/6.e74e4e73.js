(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{360:function(n,i,t){"use strict";t.r(i);var e=t(46),a=Object(e.a)({},(function(){var n=this,i=n.$createElement,t=n._self._c||i;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"算法经典问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法经典问题"}},[n._v("#")]),n._v(" 算法经典问题")]),n._v(" "),t("h1",{attrs:{id:"topk问题-数组经典问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#topk问题-数组经典问题"}},[n._v("#")]),n._v(" TopK问题(数组经典问题)")]),n._v(" "),t("h3",{attrs:{id:"变式1-选择出数组中第k小的元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变式1-选择出数组中第k小的元素"}},[n._v("#")]),n._v(" 变式1 选择出数组中第k小的元素")]),n._v(" "),t("p",[n._v("此题考虑使用两种思路:(1)维护一个堆;(2)使用快速排序的变式快速选择。")]),n._v(" "),t("p",[n._v("1.维护优先队列(手写堆或者使用PriorityQueue)")]),n._v(" "),t("div",{staticClass:"language-aidl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Solution {\n   public int findKthLargest(int[] nums, int k) {\n        int heapSize = nums.length;\n        buildMaxHeap(nums, heapSize);\n        for (int i = nums.length - 1; i >= nums.length - k + 1; --i) {\n            swap(nums, 0, i);\n            --heapSize;\n            maxHeapify(nums, 0, heapSize);\n        }\n        return nums[0];\n    }\n\n    public void buildMaxHeap(int[] a, int heapSize) {\n        for (int i = heapSize / 2; i >= 0; --i) {\n            maxHeapify(a, i, heapSize);\n        } \n    }\n\n    public void maxHeapify(int[] a, int i, int heapSize) {\n        int l = i * 2 + 1, r = i * 2 + 2, largest = i;\n        if (l < heapSize && a[l] > a[largest]) {\n            largest = l;\n        } \n        if (r < heapSize && a[r] > a[largest]) {\n            largest = r;\n        }\n        if (largest != i) {\n            swap(a, i, largest);\n            maxHeapify(a, largest, heapSize);\n        }\n    }\n\n    public void swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n}\n")])])]),t("p",[n._v("基于优先队列：")]),n._v(" "),t("div",{staticClass:"language-aidl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("public int findKthLargest(int[] nums, int k) {\n        PriorityQueue<Integer> minQueue = new PriorityQueue<>(k);\n        for (int num : nums) {\n            if (minQueue.size() < k || num > minQueue.peek()) {\n                minQueue.offer(num);\n            }\n            if (minQueue.size() > k) {\n                minQueue.poll();\n            }\n        }\n        return minQueue.peek();\n    }\n")])])]),t("p",[n._v("2.快速选择")]),n._v(" "),t("div",{staticClass:"language-aidl extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Random random = new Random();\n\n    public int findKthLargest(int[] nums, int k) {\n        return quickSelect(nums, 0, nums.length - 1, nums.length - k);\n    }\n\n    public int quickSelect(int[] a, int l, int r, int index) {\n        int q = randomPartition(a, l, r);\n        if (q == index) {\n            return a[q];\n        } else {\n            return q < index ? quickSelect(a, q + 1, r, index) : quickSelect(a, l, q - 1, index);\n        }\n    }\n\n    public int randomPartition(int[] a, int l, int r) {\n        int i = random.nextInt(r - l + 1) + l;\n        swap(a, i, r);\n        return partition(a, l, r);\n    }\n\n    public int partition(int[] a, int l, int r) {\n        int x = a[r], i = l - 1;\n        for (int j = l; j < r; ++j) {\n            if (a[j] <= x) {\n                swap(a, ++i, j);\n            }\n        }\n        swap(a, i + 1, r);\n        return i + 1;\n    }\n\n    public void swap(int[] a, int i, int j) {\n        int temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n    }\n")])])])])}),[],!1,null,null,null);i.default=a.exports}}]);